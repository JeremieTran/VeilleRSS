/* eslint @typescript-eslint/no-unsafe-call: off, @typescript-eslint/no-unsafe-return: off */
import got from 'got';
import hmacsha1 from 'hmacsha1';
import OAuth from 'oauth-1.0a';
import queryString from 'query-string';
import camelcaseKeys from 'camelcase-keys';
import decamelizedKeys from 'decamelize-keys';
import FormData from 'form-data';
import * as api from './api.js';
import FanfouError from './ff-error.js';
class Fanfou {
    constructor(options = {}) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        Object.defineProperty(this, "consumerKey", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "consumerSecret", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "oauthToken", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "oauthTokenSecret", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "username", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "password", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "protocol", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "apiDomain", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "oauthDomain", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "hooks", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "apiEndPoint", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "oauthEndPoint", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        Object.defineProperty(this, "o", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        /* c8 ignore start */
        Object.defineProperty(this, "acceptFriendship", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.acceptFriendship(this, options)
        });
        Object.defineProperty(this, "checkBlockExists", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.checkBlockExists(this, options)
        });
        Object.defineProperty(this, "checkFriendship", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.checkFriendship(this, options)
        });
        Object.defineProperty(this, "checkFriendshipDetail", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.checkFriendshipDetail(this, options)
        });
        Object.defineProperty(this, "checkFriendshipRequests", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.checkFriendshipRequests(this, options)
        });
        Object.defineProperty(this, "createBlockedUser", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.createBlockedUser(this, options)
        });
        Object.defineProperty(this, "createDirectMessage", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.createDirectMessage(this, options)
        });
        Object.defineProperty(this, "createFavorite", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.createFavorite(this, options)
        });
        Object.defineProperty(this, "createFriendship", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.createFriendship(this, options)
        });
        Object.defineProperty(this, "createSavedSearch", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.createSavedSearch(this, options)
        });
        Object.defineProperty(this, "createStatus", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.createStatus(this, options)
        });
        Object.defineProperty(this, "denyFriendship", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.denyFriendship(this, options)
        });
        Object.defineProperty(this, "dismissRecommendedUser", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.dismissRecommendedUser(this, options)
        });
        Object.defineProperty(this, "dropBlockedUser", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.dropBlockedUser(this, options)
        });
        Object.defineProperty(this, "dropDirectMessage", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.dropDirectMessage(this, options)
        });
        Object.defineProperty(this, "dropFavorite", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.dropFavorite(this, options)
        });
        Object.defineProperty(this, "dropFriendship", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.dropFriendship(this, options)
        });
        Object.defineProperty(this, "dropSavedSearch", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.dropSavedSearch(this, options)
        });
        Object.defineProperty(this, "dropStatus", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.dropStatus(this, options)
        });
        Object.defineProperty(this, "getBlockedIds", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async () => api.getBlockedIds(this)
        });
        Object.defineProperty(this, "getBlockedUsers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.getBlockedUsers(this, options)
        });
        Object.defineProperty(this, "getContextTimeline", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.getContextTimeline(this, options)
        });
        Object.defineProperty(this, "getConversation", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.getConversation(this, options)
        });
        Object.defineProperty(this, "getConversations", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.getConversations(this, options)
        });
        Object.defineProperty(this, "getFavorites", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.getFavorites(this, options)
        });
        Object.defineProperty(this, "getFollowerIds", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.getFollowerIds(this, options)
        });
        Object.defineProperty(this, "getFollowers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.getFollowers(this, options)
        });
        Object.defineProperty(this, "getFollowingIds", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.getFollowingIds(this, options)
        });
        Object.defineProperty(this, "getFollowings", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.getFollowings(this, options)
        });
        Object.defineProperty(this, "getHomeTimeline", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.getHomeTimeline(this, options)
        });
        Object.defineProperty(this, "getInbox", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.getInbox(this, options)
        });
        Object.defineProperty(this, "getMentions", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.getMentions(this, options)
        });
        Object.defineProperty(this, "getNotification", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async () => api.getNotification(this)
        });
        Object.defineProperty(this, "getPublicTimeline", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.getPublicTimeline(this, options)
        });
        Object.defineProperty(this, "getRateLimitStatus", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.getRateLimitStatus(this, options)
        });
        Object.defineProperty(this, "getRecentFollowers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.getRecentFollowers(this, options)
        });
        Object.defineProperty(this, "getRecentUsers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.getRecentUsers(this, options)
        });
        Object.defineProperty(this, "getRecommendedUsers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.getRecommendedUsers(this, options)
        });
        Object.defineProperty(this, "getReplies", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.getReplies(this, options)
        });
        Object.defineProperty(this, "getSavedSearch", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.getSavedSearch(this, options)
        });
        Object.defineProperty(this, "getSavedSearches", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.getSavedSearches(this, options)
        });
        Object.defineProperty(this, "getSent", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.getSent(this, options)
        });
        Object.defineProperty(this, "getStatus", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.getStatus(this, options)
        });
        Object.defineProperty(this, "getTaggedUsers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.getTaggedUsers(this, options)
        });
        Object.defineProperty(this, "getTrends", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.getTrends(this, options)
        });
        Object.defineProperty(this, "getUser", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.getUser(this, options)
        });
        Object.defineProperty(this, "getUserPhotos", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.getUserPhotos(this, options)
        });
        Object.defineProperty(this, "getUserTags", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.getUserTags(this, options)
        });
        Object.defineProperty(this, "getUserTimeline", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.getUserTimeline(this, options)
        });
        Object.defineProperty(this, "searchPublicTimeline", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.searchPublicTimeline(this, options)
        });
        Object.defineProperty(this, "searchUserTimeline", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.searchUserTimeline(this, options)
        });
        Object.defineProperty(this, "searchUsers", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.searchUsers(this, options)
        });
        Object.defineProperty(this, "updateNotifyNumber", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.updateNotifyNumber(this, options)
        });
        Object.defineProperty(this, "updateProfile", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.updateProfile(this, options)
        });
        Object.defineProperty(this, "updateProfileImage", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.updateProfileImage(this, options)
        });
        Object.defineProperty(this, "uploadPhoto", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.uploadPhoto(this, options)
        });
        Object.defineProperty(this, "verifyCredentials", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: async (options) => api.verifyCredentials(this, options)
        });
        this.consumerKey = (_a = options.consumerKey) !== null && _a !== void 0 ? _a : '';
        this.consumerSecret = (_b = options.consumerSecret) !== null && _b !== void 0 ? _b : '';
        this.oauthToken = (_c = options.oauthToken) !== null && _c !== void 0 ? _c : '';
        this.oauthTokenSecret = (_d = options.oauthTokenSecret) !== null && _d !== void 0 ? _d : '';
        this.username = (_e = options.username) !== null && _e !== void 0 ? _e : '';
        this.password = (_f = options.password) !== null && _f !== void 0 ? _f : '';
        this.protocol = (_g = options.protocol) !== null && _g !== void 0 ? _g : 'http:';
        this.apiDomain = (_h = options.apiDomain) !== null && _h !== void 0 ? _h : 'api.fanfou.com';
        this.oauthDomain = (_j = options.oauthDomain) !== null && _j !== void 0 ? _j : 'fanfou.com';
        this.hooks = (_k = options.hooks) !== null && _k !== void 0 ? _k : {};
        this.apiEndPoint = `${this.protocol}//${this.apiDomain}`;
        this.oauthEndPoint = `${this.protocol}//${this.oauthDomain}`;
        this.o = new OAuth({
            consumer: { key: this.consumerKey, secret: this.consumerSecret },
            signature_method: 'HMAC-SHA1',
            parameter_seperator: ',',
            /* c8 ignore start  */
            hash_function: (baseString, key) => {
                const { baseString: baseStringHook } = this.hooks;
                if (baseStringHook) {
                    baseString = baseStringHook(baseString);
                }
                return hmacsha1(key, baseString);
            },
            /* c8 ignore stop  */
        });
    }
    async getRequestToken() {
        const url = `${this.oauthEndPoint}/oauth/request_token`;
        const { Authorization } = this.o.toHeader(this.o.authorize({ url, method: 'GET' }));
        try {
            const response = await got.get(url, {
                headers: { Authorization },
            });
            const { body } = response;
            const result = queryString.parse(body);
            this.oauthToken = result['oauth_token'];
            this.oauthTokenSecret = result['oauth_token_secret'];
            return this;
            /* c8 ignore start */
        }
        catch (error) {
            throw new FanfouError(error);
        }
        /* c8 ignore stop */
    }
    async getAccessToken(token) {
        const url = `${this.oauthEndPoint}/oauth/access_token`;
        const { Authorization } = this.o.toHeader(this.o.authorize({ url, method: 'GET' }, { key: token.oauthToken, secret: token.oauthTokenSecret }));
        try {
            const response = await got.get(url, {
                headers: { Authorization },
            });
            const { body } = response;
            const result = queryString.parse(body);
            this.oauthToken = result['oauth_token'];
            this.oauthTokenSecret = result['oauth_token_secret'];
            return this;
            /* c8 ignore start */
        }
        catch (error) {
            throw new FanfouError(error);
        }
        /* c8 ignore stop */
    }
    async xauth() {
        const url = `${this.oauthEndPoint}/oauth/access_token`;
        const parameters = {
            x_auth_mode: 'client_auth',
            x_auth_password: this.password,
            x_auth_username: this.username,
        };
        const { Authorization } = this.o.toHeader(this.o.authorize({ url, method: 'POST' }));
        try {
            const response = await got.post(url, {
                headers: {
                    Authorization,
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: queryString.stringify(parameters),
            });
            const { body } = response;
            const result = queryString.parse(body);
            this.oauthToken = result['oauth_token'];
            this.oauthTokenSecret = result['oauth_token_secret'];
            return this;
            /* c8 ignore start */
        }
        catch (error) {
            throw new FanfouError(error);
        }
        /* c8 ignore stop */
    }
    async get(uri, parameters = {}) {
        parameters = decamelizedKeys(parameters, '_');
        const query = queryString.stringify(parameters);
        const url = `${this.apiEndPoint}${uri}.json${query ? `?${query}` : ''}`;
        const token = { key: this.oauthToken, secret: this.oauthTokenSecret };
        const { Authorization } = this.o.toHeader(this.o.authorize({ url, method: 'GET' }, token));
        try {
            const { body } = await got.get(url, {
                headers: {
                    Authorization,
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
            });
            return camelcaseKeys(JSON.parse(body), { deep: true });
            /* c8 ignore start */
        }
        catch (error) {
            throw new FanfouError(error);
        }
        /* c8 ignore stop */
    }
    async post(uri, parameters = {}) {
        parameters = decamelizedKeys(parameters, '_');
        const url = `${this.apiEndPoint}${uri}.json`;
        const token = { key: this.oauthToken, secret: this.oauthTokenSecret };
        const isUpload = [
            '/photos/upload',
            '/account/update_profile_image',
        ].includes(uri);
        const { Authorization } = this.o.toHeader(this.o.authorize({ url, method: 'POST', data: isUpload ? null : parameters }, token));
        let form;
        const headers = {
            Authorization,
            'Content-Type': 'application/x-www-form-urlencoded',
        };
        if (isUpload) {
            form = new FormData();
            for (const key of Object.keys(parameters)) {
                form.append(key, parameters[key]);
            }
            // @ts-expect-error: Drop `Content-Type`
            delete headers['Content-Type'];
        }
        try {
            const { body } = await got.post(url, {
                headers,
                // @ts-expect-error: Can be `undefined`
                body: isUpload ? form : queryString.stringify(parameters),
            });
            return camelcaseKeys(JSON.parse(body), { deep: true });
            /* c8 ignore start */
        }
        catch (error) {
            throw new FanfouError(error);
        }
        /* c8 ignore stop */
    }
}
export default Fanfou;
