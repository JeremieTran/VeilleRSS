import { HTTPError } from 'got';
class FanfouError extends Error {
    constructor(error) {
        var _a, _b, _c, _d;
        super();
        Object.defineProperty(this, "err", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.name = 'FanfouError';
        this.err =
            error instanceof Error || error instanceof HTTPError
                ? error
                : new Error('Unknown error');
        /* c8 ignore start */
        if (error instanceof HTTPError) {
            const contentTypes = error.response.headers['content-type'];
            const [contentType] = contentTypes ? contentTypes.split(';') : [];
            switch (contentType) {
                case 'application/json': {
                    this.message = JSON.parse(error.response.body).error;
                    break;
                }
                case 'text/html': {
                    const titleMatch = /<title>(?<msg>.+)<\/title>/.exec(error.response.body);
                    this.message =
                        (_b = (_a = titleMatch === null || titleMatch === void 0 ? void 0 : titleMatch.groups) === null || _a === void 0 ? void 0 : _a['msg']) !== null && _b !== void 0 ? _b : `${error.response.statusCode} error`;
                    break;
                }
                case 'application/xml': {
                    const errorMatch = /<error>(?<msg>.+)<\/error>/.exec(error.response.body);
                    this.message =
                        (_d = (_c = errorMatch === null || errorMatch === void 0 ? void 0 : errorMatch.groups) === null || _c === void 0 ? void 0 : _c['msg']) !== null && _d !== void 0 ? _d : `${error.response.statusCode} error`;
                    break;
                }
                default: {
                    this.message = 'Unknown error';
                    break;
                }
            }
        }
        else {
            this.message = this.err.message ? this.err.message : 'Unknown error';
        }
        /* c8 ignore stop */
    }
}
export default FanfouError;
